IDEAS:

PID is a struct

Local pid:
    - "0001:foo" <PID-ID>:<name>

Linked pid:
    - "0001@54321:foo" <PID-ID>@<OS-PID>:<name>

Distributed pid:
    - "0001@elo.example.org:foo" <PID-ID>@<hostname>:<name>
    - "0001@127.0.0.1:foo"       <PID-ID>@<localhost>:<name>


TODO:

- move the proc:: stuff into its own module
    - the use of PROCESS_TABLE inside loop can be replaced with function calls
        - most of it is DEBUG stuff anyway

- move process STATUS to Core::ProcessRecord
    - add methods to query it, so we don't need to know them outside


Things to consider:

- VM abstraction, helps in organizing forks, i/o, etc.

- Erlang like linked processes ... where if one of the linked processes dies, it sends a single to the other.
    - can only have one link between procs, no more.

- Erlang like monitors ... same as linked, but you can have many of them



Dependeny issues

- ELO::Core::Message depends on ELO::Loop for enqueueing messages
    - ELO::Loop loads ELO::Core::Message
